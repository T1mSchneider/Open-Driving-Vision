# -*- coding: utf-8 -*-
"""Driving-Vision

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LJ8CJWWVYewpQ8X5Psj6SsqlYzdX1T64
"""

# !git clone https://github.com/ben-gunnels/Open-Driving-Vision.git

# !pip install git+https://github.com/tensorflow/examples.git
# !pip install -U keras
# !pip install -q tensorflow_datasets
# !pip install -q -U tensorflow-text tensorflow

# from google.colab import files
# uploaded = files.upload()  # Opens a file selection dialog

import zipfile
import os

zip_path = "masks_and_images.zip"  # Change this to your file name
extract_dir = "dataset"

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_dir)

print("Extraction complete!")

import tensorflow as tf
import os
import numpy as np

IMG_OUTPUT_PATH = "/content/dataset/masks_and_images/images"
MASKS_OUTPUT_PATH = "/content/dataset/masks_and_images/masks"

# Get sorted lists of image and mask file paths
image_paths = sorted([os.path.join(IMG_OUTPUT_PATH, fname) for fname in os.listdir(IMG_OUTPUT_PATH)])
mask_paths = sorted([os.path.join(MASKS_OUTPUT_PATH, fname) for fname in os.listdir(MASKS_OUTPUT_PATH)])

# Create a TensorFlow Dataset
dataset = tf.data.Dataset.from_tensor_slices((image_paths, mask_paths))


class Augment(tf.keras.layers.Layer):
  def __init__(self, seed=42):
    super().__init__()
    # both use the same seed, so they'll make the same random changes.
    self.augment_inputs = tf.keras.layers.RandomFlip(mode="horizontal", seed=seed)
    self.augment_labels = tf.keras.layers.RandomFlip(mode="horizontal", seed=seed)

  def call(self, inputs, labels):
    inputs = self.augment_inputs(inputs)
    labels = self.augment_labels(labels)
    return inputs, labels

# Function to load and preprocess images and masks
def load_and_preprocess(image_path, mask_path):
    # Load image
    image = tf.io.read_file(image_path)
    image = tf.image.decode_jpeg(image, channels=3)  # Assuming RGB images
    image = tf.image.resize(image, (128, 128))  # Resize as needed
    image = tf.image.convert_image_dtype(image, tf.float32)  # Normalize to [0,1]

    # Load mask
    mask = tf.io.read_file(mask_path)
    mask = tf.image.decode_png(mask, channels=1)  # Assuming single-channel mask
    mask = tf.image.resize(mask, (128, 128))  # Resize as needed
    mask = tf.image.convert_image_dtype(mask, tf.float32)  # Normalize to [0,1]

    return image, mask

# Apply preprocessing
dataset = dataset.map(load_and_preprocess, num_parallel_calls=tf.data.AUTOTUNE)
dataset = dataset.map(Augment())
dataset = dataset.batch(32).shuffle(100).prefetch(tf.data.AUTOTUNE)

for data in dataset.take(1):
  # Convert and display image using OpenCV
  # cv2_imshow(data[0].numpy())
  print(data[0].numpy().shape)
  print(data[1].numpy().shape)

# TRAIN_LENGTH = info.splits['train'].num_examples
BATCH_SIZE = 64
BUFFER_SIZE = 1000
# STEPS_PER_EPOCH = TRAIN_LENGTH // BATCH_SIZE

from IPython.display import clear_output
import matplotlib.pyplot as plt

def display(display_list):
  plt.figure(figsize=(15, 15))

  title = ['Input Image', 'True Mask', 'Predicted Mask']

  for i in range(len(display_list)):
    plt.subplot(1, len(display_list), i+1)
    plt.title(title[i])
    plt.imshow(tf.keras.utils.array_to_img(display_list[i]))
    plt.axis('off')
  plt.show()

for images, masks in dataset.take(2):
  sample_image, sample_mask = images[0], masks[0]
  display([sample_image, sample_mask])

base_model = tf.keras.applications.MobileNetV2(input_shape=[128, 128, 3], include_top=False)

# Use the activations of these layers
layer_names = [
    'block_1_expand_relu',   # 64x64
    'block_3_expand_relu',   # 32x32
    'block_6_expand_relu',   # 16x16
    'block_13_expand_relu',  # 8x8
    'block_16_project',      # 4x4
]
base_model_outputs = [base_model.get_layer(name).output for name in layer_names]

# Create the feature extraction model
down_stack = tf.keras.Model(inputs=base_model.input, outputs=base_model_outputs)

down_stack.trainable = False

from tensorflow_examples.models.pix2pix import pix2pix

up_stack = [
    pix2pix.upsample(512, 3),  # 4x4 -> 8x8
    pix2pix.upsample(256, 3),  # 8x8 -> 16x16
    pix2pix.upsample(128, 3),  # 16x16 -> 32x32
    pix2pix.upsample(64, 3),   # 32x32 -> 64x64
]

def unet_model(output_channels:int):
  inputs = tf.keras.layers.Input(shape=[128, 128, 3])

  # Downsampling through the model
  skips = down_stack(inputs)
  x = skips[-1]
  skips = reversed(skips[:-1])

  # Upsampling and establishing the skip connections
  for up, skip in zip(up_stack, skips):
    x = up(x)
    concat = tf.keras.layers.Concatenate()
    x = concat([x, skip])

  # This is the last layer of the model
  last = tf.keras.layers.Conv2DTranspose(
      filters=output_channels, kernel_size=3, strides=2,
      padding='same')  #64x64 -> 128x128

  x = last(x)

  return tf.keras.Model(inputs=inputs, outputs=x)

OUTPUT_CLASSES = 25

model = unet_model(output_channels=OUTPUT_CLASSES)
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

def create_mask(pred_mask):
  pred_mask = tf.math.argmax(pred_mask, axis=-1)
  pred_mask = pred_mask[..., tf.newaxis]
  return pred_mask[0]

def show_predictions(dataset=None, num=1):
  if dataset:
    for image, mask in dataset.take(num):
      pred_mask = model.predict(image)
      display([image[0], mask[0], create_mask(pred_mask)])
  else:
    display([sample_image, sample_mask,
             create_mask(model.predict(sample_image[tf.newaxis, ...]))])

class DisplayCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs=None):
    clear_output(wait=True)
    show_predictions()
    print ('\nSample Prediction after epoch {}\n'.format(epoch+1))

EPOCHS = 20
VAL_SUBSPLITS = 5
VALIDATION_STEPS = 2
STEPS_PER_EPOCH = 7

model_history = model.fit(dataset, epochs=EPOCHS,
                          steps_per_epoch=STEPS_PER_EPOCH,
                          callbacks=[DisplayCallback()])

# Save weights
model.save_weights("model_run1_weights.weights.h5")  # HDF5 format
print("Weights saved!")

show_predictions(dataset, 3)