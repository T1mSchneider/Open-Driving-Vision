# -*- coding: utf-8 -*-
"""Driving-Vision

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LJ8CJWWVYewpQ8X5Psj6SsqlYzdX1T64
"""

# !git clone https://github.com/ben-gunnels/Open-Driving-Vision.git

# !pip install git+https://github.com/tensorflow/examples.git
# !pip install -U keras
# !pip install -q tensorflow_datasets
# !pip install -q -U tensorflow-text tensorflow

# from google.colab import files
# uploaded = files.upload()  # Opens a file selection dialog
from .dataset.CreateDataset import CreateTensorflowDataset
from .UnetModel import Unet

# TRAIN_LENGTH = info.splits['train'].num_examples
BATCH_SIZE = 64
BUFFER_SIZE = 1000
# STEPS_PER_EPOCH = TRAIN_LENGTH // BATCH_SIZE

from IPython.display import clear_output
import matplotlib.pyplot as plt

dataset = CreateTensorflowDataset().get_dataset(False)

def display(display_list):
  plt.figure(figsize=(15, 15))

  title = ['Input Image', 'True Mask', 'Predicted Mask']

  for i in range(len(display_list)):
    plt.subplot(1, len(display_list), i+1)
    plt.title(title[i])
    plt.imshow(tf.keras.utils.array_to_img(display_list[i]))
    plt.axis('off')
  plt.show()

for images, masks in dataset.take(2):
  sample_image, sample_mask = images[0], masks[0]
  display([sample_image, sample_mask])



EPOCHS = 20
VAL_SUBSPLITS = 5
VALIDATION_STEPS = 2
STEPS_PER_EPOCH = 7


OUTPUT_CLASSES = 25


model = Unet(output_channels=OUTPUT_CLASSES).generate_model()

model.compile(optimizer='adam',
            loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
            metrics=['accuracy'])

def create_mask(pred_mask):
    pred_mask = tf.math.argmax(pred_mask, axis=-1)
    pred_mask = pred_mask[..., tf.newaxis]
    return pred_mask[0]

def show_predictions(dataset=None, num=1):
    if dataset:
        for image, mask in dataset.take(num):
          pred_mask = model.predict(image)
          display([image[0], mask[0], create_mask(pred_mask)])
    else:
        display([sample_image, sample_mask,
                create_mask(model.predict(sample_image[tf.newaxis, ...]))])

class DisplayCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs=None):
    clear_output(wait=True)
    show_predictions()
    print ('\nSample Prediction after epoch {}\n'.format(epoch+1))

model_history = model.fit(dataset, epochs=EPOCHS,
                          steps_per_epoch=STEPS_PER_EPOCH,
                          callbacks=[DisplayCallback()])\
                          
          

# Save weights
model.save_weights("model_run1_weights.weights.h5")  # HDF5 format
print("Weights saved!")

show_predictions(dataset, 3)